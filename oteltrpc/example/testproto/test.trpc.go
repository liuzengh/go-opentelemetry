// Code generated by trpc-go/trpc-cmdline v1.0.5. DO NOT EDIT.
// source: test.proto

package trpc_test_testproto

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
	"trpc.group/trpc-go/trpc-go/stream"
)

// START ======================================= Server Service Definition ======================================= START

// TestServiceService defines service.
type TestServiceService interface {
	PingList(*PingRequest, TestService_PingListServer) error
}

func TestServiceService_PingList_Handler(srv interface{}, stream server.Stream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceService).PingList(m, &testServicePingListServer{stream})
}

type TestService_PingListServer interface {
	Send(*PingResponse) error
	server.Stream
}

type testServicePingListServer struct {
	server.Stream
}

func (x *testServicePingListServer) Send(m *PingResponse) error {
	return x.Stream.SendMsg(m)
}

// TestServiceServer_ServiceDesc descriptor for server.RegisterService.
var TestServiceServer_ServiceDesc = server.ServiceDesc{
	ServiceName:  "trpc.test.testproto.TestService",
	HandlerType:  ((*TestServiceService)(nil)),
	StreamHandle: stream.NewStreamDispatcher(),
	Methods:      []server.Method{},
	Streams: []server.StreamDesc{
		{
			StreamName:    "/trpc.test.testproto.TestService/PingList",
			Handler:       TestServiceService_PingList_Handler,
			ServerStreams: true,
		},
	},
}

// RegisterTestServiceService registers service.
func RegisterTestServiceService(s server.Service, svr TestServiceService) {
	if err := s.Register(&TestServiceServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("TestService register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedTestService struct{}

func (s *UnimplementedTestService) PingList(req *PingRequest, stream TestService_PingListServer) error {
	return errors.New("rpc PingList of service TestService is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// TestServiceClientProxy defines service client proxy
type TestServiceClientProxy interface {
	PingList(ctx context.Context, req *PingRequest, opts ...client.Option) (TestService_PingListClient, error)
}

type TestServiceClientProxyImpl struct {
	client       client.Client
	streamClient stream.Client
	opts         []client.Option
}

var NewTestServiceClientProxy = func(opts ...client.Option) TestServiceClientProxy {
	return &TestServiceClientProxyImpl{client: client.DefaultClient, streamClient: stream.DefaultStreamClient, opts: opts}
}

func (c *TestServiceClientProxyImpl) PingList(ctx context.Context, req *PingRequest, opts ...client.Option) (TestService_PingListClient, error) {
	ctx, msg := codec.WithCloneMessage(ctx)

	msg.WithClientRPCName("/trpc.test.testproto.TestService/PingList")
	msg.WithCalleeServiceName(TestServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("test")
	msg.WithCalleeServer("testproto")
	msg.WithCalleeService("TestService")
	msg.WithCalleeMethod("PingList")
	msg.WithSerializationType(codec.SerializationTypePB)

	clientStreamDesc := &client.ClientStreamDesc{}
	clientStreamDesc.StreamName = "/trpc.test.testproto.TestService/PingList"
	clientStreamDesc.ClientStreams = false
	clientStreamDesc.ServerStreams = true

	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)

	stream, err := c.streamClient.NewStream(ctx, clientStreamDesc, "/trpc.test.testproto.TestService/PingList", callopts...)
	if err != nil {
		return nil, err
	}
	x := &testServicePingListClient{stream}
	if err := x.ClientStream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_PingListClient interface {
	Recv() (*PingResponse, error)
	client.ClientStream
}

type testServicePingListClient struct {
	client.ClientStream
}

func (x *testServicePingListClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// END ======================================= Client Service Definition ======================================= END
